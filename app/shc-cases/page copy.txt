"use client";

import { useState, useEffect, use } from "react";
import { useRouter } from "next/navigation";
import Header from "../components/Header";

interface Case {
  srNo: string;
  caseType: string;
  caseNo: string;
  caseYear: string;
  bench: string;
  circuit: string;
  parties: string;
  matter: string;
  institutionDate: string;
  lastDate: string;
  nextDate: string;
  status: string;
  caseId: string | null;
}

export default function SHCCasesPage() {
  const router = useRouter();
  const [cases, setCases] = useState<Case[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [advocateCode, setAdvocateCode] = useState("29694");
  const [city, setCity] = useState("khi");
  const [caseNum, setCaseNum] = useState('');
  const [caseYear, setCaseYear] = useState('');
  const [searchT, setSearchT] = useState(false)
  //   const [searchCode, setSearchCode] = useState('29694');

  // Pagination state
  const [currentPage, setCurrentPage] = useState(1);
  const [hasNextPage, setHasNextPage] = useState(false);
  const [hasPrevPage, setHasPrevPage] = useState(false);
  const [totalCount, setTotalCount] = useState<number | null>(null);
  

  // Pagination calculations
  const itemsPerPage = 10;
  const totalPages = totalCount ? Math.ceil(totalCount / itemsPerPage) : 1;
  const indexOfFirstItem = (currentPage - 1) * itemsPerPage;
  const indexOfLastItem = indexOfFirstItem + itemsPerPage;

  const fetchCases = async (code: string, page: number) => {
    setLoading(true);
    setError(null);

    try {
      const response = await fetch(
        `/api/shc-cases?advocateCode=29694&page=${page}&city=${city}&caseNum=${caseNum}&caseYear=${caseYear}`
      );
      const result = await response.json(); 
      

      if (result.success) {
        setCases(result.data);
        setHasNextPage(result.hasNextPage);
        setHasPrevPage(result.hasPrevPage);
        setTotalCount(result.totalCount);
      } else {
        setError(result.error || "Failed to fetch cases");
      }
    } catch (err) {
      setError("Network error occurred");
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchCases(advocateCode, currentPage);
  }, [advocateCode, currentPage, city, searchT]);

    const handleSearch = (e: React.FormEvent) => {
      e.preventDefault();
      
      setSearchT(true);
      setCurrentPage(1); // Reset to first page on new search
    };

  const handleViewCase = (caseId: string) => {
    router.push(`/shc-cases/${caseId}`);
  };

  const goToPage = (pageNumber: number) => {
    setCurrentPage(pageNumber);
    window.scrollTo({ top: 0, behavior: "smooth" });
  };

  function renderPagination(): React.ReactNode {
    if (totalPages <= 1) return null;

    const pageNumbers = [];
    const maxPageButtons = 5;
    let startPage = Math.max(1, currentPage - Math.floor(maxPageButtons / 2));
    let endPage = startPage + maxPageButtons - 1;

    if (endPage > totalPages) {
      endPage = totalPages;
      startPage = Math.max(1, endPage - maxPageButtons + 1);
    }

    for (let i = startPage; i <= endPage; i++) {
      pageNumbers.push(i);
    }

    return (
      <div className="flex justify-center items-center mt-4 gap-2">
        <button
          disabled={currentPage === 1}
          onClick={() => goToPage(currentPage - 1)}
          className={`px-3 py-1 rounded border ${
            currentPage === 1
              ? "bg-gray-200 text-gray-400 cursor-not-allowed"
              : "bg-white hover:bg-gray-100 text-blue-600"
          }`}
        >
          Prev
        </button>
        {startPage > 1 && (
          <button
            onClick={() => goToPage(1)}
            className="px-3 py-1 rounded border bg-white hover:bg-gray-100 text-blue-600"
          >
            1
          </button>
        )}
        {startPage > 2 && <span className="px-2">...</span>}
        {pageNumbers.map((num) => (
          <button
            key={num}
            onClick={() => goToPage(num)}
            className={`px-3 py-1 rounded border ${
              num === currentPage
                ? "bg-blue-600 text-white"
                : "bg-white hover:bg-gray-100 text-blue-600"
            }`}
          >
            {num}
          </button>
        ))}
        {endPage < totalPages - 1 && <span className="px-2">...</span>}
        {endPage < totalPages && (
          <button
            onClick={() => goToPage(totalPages)}
            className="px-3 py-1 rounded border bg-white hover:bg-gray-100 text-blue-600"
          >
            {totalPages}
          </button>
        )}
        <button
          disabled={currentPage === totalPages}
          onClick={() => goToPage(currentPage + 1)}
          className={`px-3 py-1 rounded border ${
            currentPage === totalPages
              ? "bg-gray-200 text-gray-400 cursor-not-allowed"
              : "bg-white hover:bg-gray-100 text-blue-600"
          }`}
        >
          Next
        </button>
      </div>
    );
  }

  return (
    <div>
      <Header />
      <div className="container mx-auto p-6">
        <h1 className="text-3xl font-bold mb-6">
          Sindh High Court Cases - Karachi
        </h1>

        {/* <form onSubmit={handleSearch} className="mb-6">
        <div className="flex gap-2">
          <input
            type="text"
            value={searchCode}
            onChange={(e) => setSearchCode(e.target.value)}
            placeholder="Enter Advocate Code"
            className="border rounded px-4 py-2 flex-1"
          />
          <button
            type="submit"
            className="bg-blue-600 text-white px-6 py-2 rounded hover:bg-blue-700"
          >
            Search
          </button>
        </div>
      </form> */}
        <div className="md:flex md:gap-4 lg:flex lg:gap-4 justify-center items-center">
          <div>
            <label
              htmlFor="city-circuit"
              className="block text-sm font-medium text-gray-700 mb-1"
            >
              City/Circuit
            </label>
            <select
              id="city-circuit"
              className="border rounded px-3 py-2 w-full max-w-xs"
              onChange={(e) => setCity(e.target.value)}
            >
              <option value="khi">Karachi</option>
              <option value="suk">Sukkur</option>
              <option value="hyd">Hyderabad</option>
              <option value="lar">Larkana</option>
              <option value="mirpurkhas">Mirpurkhas</option>
            </select>
          </div>
          <div>
            <label
              htmlFor="case-number"
              className="block text-sm font-medium text-gray-700 mb-1"
            >
              Case Number
            </label>
            <input
              type="text"
            value={caseNum}
            onChange={(e) => setCaseNum(e.target.value)}
            placeholder="Enter Case Number"
            className="border rounded px-3 py-2 w-full max-w-xs"

            />
          </div>
          <div>
            <label
              htmlFor="case-year"
              className="block text-sm font-medium text-gray-700 mb-1"
            >
              Year
            </label>
            <input
              type="text"
            value={caseYear}
            onChange={(e) => setCaseYear(e.target.value)}
            placeholder="Enter Case Year"
            className="border rounded px-3 py-2 w-full max-w-xs"
            />
          </div>
          <div className="pt-4">
           <button
            type="submit"
            className="bg-blue-600 text-white px-6 py-2 rounded hover:bg-blue-700"
            onClick={handleSearch}
          >
            Search
          </button>
          </div>
        </div>

        {loading && (
          <div className="text-center py-8">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto"></div>
            <p className="mt-4 text-gray-600">Loading cases...</p>
          </div>
        )}

        {error && (
          <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded">
            {error}
          </div>
        )}

        {!loading && !error && cases.length === 0 && (
          <div className="text-center py-8 text-gray-600">
            No cases found for this advocate code.
          </div>
        )}

        {!loading && !error && cases.length > 0 && (
          <div className="overflow-x-auto">
            <div className="mb-4 flex justify-between items-center">
              <p className="text-gray-600">
                Showing {indexOfFirstItem + 1}-
                {Math.min(indexOfLastItem, cases.length)} of {cases.length}{" "}
                cases
              </p>
              <p className="text-gray-600">
                Page {currentPage} of {totalPages}
              </p>
            </div>
            <table className="min-w-full bg-white border border-gray-300">
              <thead className="bg-gray-100">
                <tr>
                  <th className="px-4 py-2 border">Sr#</th>
                  <th className="px-4 py-2 border">Type</th>
                  <th className="px-4 py-2 border">Case No</th>
                  <th className="px-4 py-2 border">Year</th>
                  <th className="px-4 py-2 border">Bench</th>
                  <th className="px-4 py-2 border">Circuit</th>
                  <th className="px-4 py-2 border">Parties</th>
                  <th className="px-4 py-2 border">Matter</th>
                  <th className="px-4 py-2 border">Institution Date</th>
                  <th className="px-4 py-2 border">Last Date</th>
                  <th className="px-4 py-2 border">Next Date</th>
                  <th className="px-4 py-2 border">Status</th>
                  <th className="px-4 py-2 border">Action</th>
                </tr>
              </thead>
              <tbody>
                {cases.map((caseItem, index) => (
                  <tr key={index} className="hover:bg-gray-50">
                    <td className="px-4 py-2 border">{caseItem.srNo}</td>
                    <td className="px-4 py-2 border">{caseItem.caseType}</td>
                    <td className="px-4 py-2 border">{caseItem.caseNo}</td>
                    <td className="px-4 py-2 border">{caseItem.caseYear}</td>
                    <td className="px-4 py-2 border">{caseItem.bench}</td>
                    <td className="px-4 py-2 border">{caseItem.circuit}</td>
                    <td className="px-4 py-2 border">
                      <div
                        dangerouslySetInnerHTML={{ __html: caseItem.parties }}
                      />
                    </td>
                    <td className="px-4 py-2 border">{caseItem.matter}</td>
                    <td className="px-4 py-2 border">
                      {caseItem.institutionDate}
                    </td>
                    <td className="px-4 py-2 border">{caseItem.lastDate}</td>
                    <td className="px-4 py-2 border">{caseItem.nextDate}</td>
                    <td className="px-4 py-2 border">
                      <div
                        dangerouslySetInnerHTML={{ __html: caseItem.status }}
                      />
                    </td>
                    <td className="px-4 py-2 border">
                      {caseItem.caseId ? (
                        <button
                          onClick={() => handleViewCase(caseItem.caseId!)}
                          className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 inline-block text-sm"
                        >
                          View
                        </button>
                      ) : (
                        <span className="text-gray-400">N/A</span>
                      )}
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
            {renderPagination()}
          </div>
        )}
      </div>
    </div>
  );
}


// "use client";

// import { useState, useEffect, use } from "react";
// import { useRouter } from "next/navigation";
// import Header from "../components/Header";

// interface Case {
//   srNo: string;
//   caseType: string;
//   caseNo: string;
//   caseYear: string;
//   bench: string;
//   circuit: string;
//   parties: string;
//   matter: string;
//   institutionDate: string;
//   lastDate: string;
//   nextDate: string;
//   status: string;
//   caseId: string | null;
// }

// export default function SHCCasesPage() {
//   const router = useRouter();
//   const [allCases, setAllCases] = useState<Case[]>([]);
//   const [filteredCases, setFilteredCases] = useState<Case[]>([]);
//   const [loading, setLoading] = useState(true);
//   const [error, setError] = useState<string | null>(null);
//   const [advocateCode, setAdvocateCode] = useState("29694");
//   const [city, setCity] = useState("khi");
//   const [caseNum, setCaseNum] = useState('');
//   const [caseYear, setCaseYear] = useState('');

//   // Pagination state
//   const [currentPage, setCurrentPage] = useState(1);
//   const itemsPerPage = 10;

//   // Fetch ALL cases without pagination
//   const fetchAllCases = async () => {
//     setLoading(true);
//     setError(null);

//     try {
//       const response = await fetch(
//         `/api/shc-cases?advocateCode=${advocateCode}&city=${city}&all=true`
//       );
//       const result = await response.json(); 

//       if (result.success) {
//         setAllCases(result.data);
//         setFilteredCases(result.data);
//       } else {
//         setError(result.error || "Failed to fetch cases");
//       }
//     } catch (err) {
//       setError("Network error occurred");
//     } finally {
//       setLoading(false);
//     }
//   };

//   useEffect(() => {
//     fetchAllCases();
//   }, [advocateCode, city]);

//   // Apply filters
//   useEffect(() => {
//     applyFilters();
//   }, [caseNum, caseYear, allCases]);

//   const applyFilters = () => {
//     let filtered = [...allCases];
    
//     if (caseNum.trim() !== '') {
//       filtered = filtered.filter(caseItem => 
//         caseItem.caseNo.toLowerCase().includes(caseNum.toLowerCase())
//       );
//     }
    
//     if (caseYear.trim() !== '') {
//       filtered = filtered.filter(caseItem => 
//         caseItem.caseYear.includes(caseYear)
//       );
//     }
    
//     setFilteredCases(filtered);
//     setCurrentPage(1);
//   };

//   const handleSearch = (e: React.FormEvent) => {
//     e.preventDefault();
//     applyFilters();
//   };

//   const handleClearFilters = () => {
//     setCaseNum('');
//     setCaseYear('');
//     setFilteredCases(allCases);
//     setCurrentPage(1);
//   };

//   const handleViewCase = (caseId: string) => {
//     router.push(`/shc-cases/${caseId}`);
//   };

//   // Client-side pagination calculations
//   const totalFilteredCount = filteredCases.length;
//   const totalPages = Math.ceil(totalFilteredCount / itemsPerPage);
//   const indexOfFirstItem = (currentPage - 1) * itemsPerPage;
//   const indexOfLastItem = indexOfFirstItem + itemsPerPage;
//   const currentCases = filteredCases.slice(indexOfFirstItem, indexOfLastItem);

//   const goToPage = (pageNumber: number) => {
//     setCurrentPage(pageNumber);
//     window.scrollTo({ top: 0, behavior: "smooth" });
//   };

//   function renderPagination(): React.ReactNode {
//     if (totalPages <= 1) return null;

//     const pageNumbers = [];
//     const maxPageButtons = 5;
//     let startPage = Math.max(1, currentPage - Math.floor(maxPageButtons / 2));
//     let endPage = startPage + maxPageButtons - 1;

//     if (endPage > totalPages) {
//       endPage = totalPages;
//       startPage = Math.max(1, endPage - maxPageButtons + 1);
//     }

//     for (let i = startPage; i <= endPage; i++) {
//       pageNumbers.push(i);
//     }

//     return (
//       <div className="flex justify-center items-center mt-4 gap-2">
//         <button
//           disabled={currentPage === 1}
//           onClick={() => goToPage(currentPage - 1)}
//           className={`px-3 py-1 rounded border ${
//             currentPage === 1
//               ? "bg-gray-200 text-gray-400 cursor-not-allowed"
//               : "bg-white hover:bg-gray-100 text-blue-600"
//           }`}
//         >
//           Prev
//         </button>
//         {startPage > 1 && (
//           <button
//             onClick={() => goToPage(1)}
//             className="px-3 py-1 rounded border bg-white hover:bg-gray-100 text-blue-600"
//           >
//             1
//           </button>
//         )}
//         {startPage > 2 && <span className="px-2">...</span>}
//         {pageNumbers.map((num) => (
//           <button
//             key={num}
//             onClick={() => goToPage(num)}
//             className={`px-3 py-1 rounded border ${
//               num === currentPage
//                 ? "bg-blue-600 text-white"
//                 : "bg-white hover:bg-gray-100 text-blue-600"
//             }`}
//           >
//             {num}
//           </button>
//         ))}
//         {endPage < totalPages - 1 && <span className="px-2">...</span>}
//         {endPage < totalPages && (
//           <button
//             onClick={() => goToPage(totalPages)}
//             className="px-3 py-1 rounded border bg-white hover:bg-gray-100 text-blue-600"
//           >
//             {totalPages}
//           </button>
//         )}
//         <button
//           disabled={currentPage === totalPages}
//           onClick={() => goToPage(currentPage + 1)}
//           className={`px-3 py-1 rounded border ${
//             currentPage === totalPages
//               ? "bg-gray-200 text-gray-400 cursor-not-allowed"
//               : "bg-white hover:bg-gray-100 text-blue-600"
//           }`}
//         >
//           Next
//         </button>
//       </div>
//     );
//   }

//   return (
//     <div>
//       <Header />
//       <div className="container mx-auto p-6">
//         <h1 className="text-3xl font-bold mb-6">
//           Sindh High Court Cases - {city.toUpperCase()}
//         </h1>

//         <div className="md:flex md:gap-4 lg:flex lg:gap-4 justify-center items-center">
//           <div>
//             <label
//               htmlFor="city-circuit"
//               className="block text-sm font-medium text-gray-700 mb-1"
//             >
//               City/Circuit
//             </label>
//             <select
//               id="city-circuit"
//               className="border rounded px-3 py-2 w-full max-w-xs"
//               value={city}
//               onChange={(e) => setCity(e.target.value)}
//             >
//               <option value="khi">Karachi</option>
//               <option value="suk">Sukkur</option>
//               <option value="hyd">Hyderabad</option>
//               <option value="lar">Larkana</option>
//               <option value="mirpurkhas">Mirpurkhas</option>
//             </select>
//           </div>
//           <div>
//             <label
//               htmlFor="case-number"
//               className="block text-sm font-medium text-gray-700 mb-1"
//             >
//               Case Number
//             </label>
//             <input
//               type="text"
//               value={caseNum}
//               onChange={(e) => setCaseNum(e.target.value)}
//               placeholder="Enter Case Number"
//               className="border rounded px-3 py-2 w-full max-w-xs"
//             />
//           </div>
//           <div>
//             <label
//               htmlFor="case-year"
//               className="block text-sm font-medium text-gray-700 mb-1"
//             >
//               Year
//             </label>
//             <input
//               type="text"
//               value={caseYear}
//               onChange={(e) => setCaseYear(e.target.value)}
//               placeholder="Enter Case Year"
//               className="border rounded px-3 py-2 w-full max-w-xs"
//             />
//           </div>
//           <div className="pt-4 flex gap-2">
//             <button
//               type="submit"
//               className="bg-blue-600 text-white px-6 py-2 rounded hover:bg-blue-700"
//               onClick={handleSearch}
//             >
//               Search
//             </button>
//             <button
//               type="button"
//               className="bg-gray-500 text-white px-6 py-2 rounded hover:bg-gray-600"
//               onClick={handleClearFilters}
//             >
//               Clear
//             </button>
//           </div>
//         </div>

//         {/* Loading and summary info */}
//         {loading && (
//           <div className="mt-4 p-3 bg-blue-50 rounded">
//             <p className="text-sm text-blue-700">
//               Loading all cases... This may take a moment as we fetch all pages.
//             </p>
//           </div>
//         )}

//         {(caseNum || caseYear) && !loading && (
//           <div className="mt-4 p-3 bg-blue-50 rounded">
//             <p className="text-sm text-blue-700">
//               Showing {filteredCases.length} of {allCases.length} cases filtered by: 
//               {caseNum && ` Case Number: "${caseNum}"`}
//               {caseNum && caseYear && ' and'}
//               {caseYear && ` Year: "${caseYear}"`}
//             </p>
//           </div>
//         )}

//         {!loading && allCases.length > 0 && (
//           <div className="mt-4 p-3 bg-green-50 rounded">
//             <p className="text-sm text-green-700">
//               Loaded {allCases.length} total cases. Use filters above to search.
//             </p>
//           </div>
//         )}

//         {loading && (
//           <div className="text-center py-8">
//             <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto"></div>
//             <p className="mt-4 text-gray-600">Loading all cases... This may take a while.</p>
//           </div>
//         )}

//         {error && (
//           <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded">
//             {error}
//           </div>
//         )}

//         {!loading && !error && filteredCases.length === 0 && (
//           <div className="text-center py-8 text-gray-600">
//             {allCases.length === 0 
//               ? "No cases found for this advocate code." 
//               : "No cases match your filter criteria."}
//           </div>
//         )}

//         {!loading && !error && filteredCases.length > 0 && (
//           <div className="overflow-x-auto">
//             <div className="mb-4 flex justify-between items-center">
//               <p className="text-gray-600">
//                 Showing {indexOfFirstItem + 1}-
//                 {Math.min(indexOfLastItem, totalFilteredCount)} of {totalFilteredCount}{" "}
//                 cases
//                 {(caseNum || caseYear) && " (filtered)"}
//               </p>
//               <p className="text-gray-600">
//                 Page {currentPage} of {totalPages}
//               </p>
//             </div>
//             <table className="min-w-full bg-white border border-gray-300">
//               <thead className="bg-gray-100">
//                 <tr>
//                   <th className="px-4 py-2 border">Sr#</th>
//                   <th className="px-4 py-2 border">Type</th>
//                   <th className="px-4 py-2 border">Case No</th>
//                   <th className="px-4 py-2 border">Year</th>
//                   <th className="px-4 py-2 border">Bench</th>
//                   <th className="px-4 py-2 border">Circuit</th>
//                   <th className="px-4 py-2 border">Parties</th>
//                   <th className="px-4 py-2 border">Matter</th>
//                   <th className="px-4 py-2 border">Institution Date</th>
//                   <th className="px-4 py-2 border">Last Date</th>
//                   <th className="px-4 py-2 border">Next Date</th>
//                   <th className="px-4 py-2 border">Status</th>
//                   <th className="px-4 py-2 border">Action</th>
//                 </tr>
//               </thead>
//               <tbody>
//                 {currentCases.map((caseItem, index) => (
//                   <tr key={index} className="hover:bg-gray-50">
//                     <td className="px-4 py-2 border">{caseItem.srNo}</td>
//                     <td className="px-4 py-2 border">{caseItem.caseType}</td>
//                     <td className="px-4 py-2 border">{caseItem.caseNo}</td>
//                     <td className="px-4 py-2 border">{caseItem.caseYear}</td>
//                     <td className="px-4 py-2 border">{caseItem.bench}</td>
//                     <td className="px-4 py-2 border">{caseItem.circuit}</td>
//                     <td className="px-4 py-2 border">
//                       <div
//                         dangerouslySetInnerHTML={{ __html: caseItem.parties }}
//                       />
//                     </td>
//                     <td className="px-4 py-2 border">{caseItem.matter}</td>
//                     <td className="px-4 py-2 border">
//                       {caseItem.institutionDate}
//                     </td>
//                     <td className="px-4 py-2 border">{caseItem.lastDate}</td>
//                     <td className="px-4 py-2 border">{caseItem.nextDate}</td>
//                     <td className="px-4 py-2 border">
//                       <div
//                         dangerouslySetInnerHTML={{ __html: caseItem.status }}
//                       />
//                     </td>
//                     <td className="px-4 py-2 border">
//                       {caseItem.caseId ? (
//                         <button
//                           onClick={() => handleViewCase(caseItem.caseId!)}
//                           className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 inline-block text-sm"
//                         >
//                           View
//                         </button>
//                       ) : (
//                         <span className="text-gray-400">N/A</span>
//                       )}
//                     </td>
//                   </tr>
//                 ))}
//               </tbody>
//             </table>
//             {renderPagination()}
//           </div>
//         )}
//       </div>
//     </div>
//   );
// }

// "use client";

// import { useState, useEffect, use } from "react";
// import { useRouter } from "next/navigation";
// import Header from "../components/Header";
// import {Search} from 'lucide-react'

// interface Case {
//   srNo: string;
//   caseType: string;
//   caseNo: string;
//   caseYear: string;
//   bench: string;
//   circuit: string;
//   parties: string;
//   matter: string;
//   institutionDate: string;
//   lastDate: string;
//   nextDate: string;
//   status: string;
//   caseId: string | null;
// }

// export default function SHCCasesPage() {
//   const router = useRouter();
//   const [allCases, setAllCases] = useState<Case[]>([]);
//   const [filteredCases, setFilteredCases] = useState<Case[]>([]);
//   const [loading, setLoading] = useState(false);
//   const [initialLoad, setInitialLoad] = useState(false);
//   const [error, setError] = useState<string | null>(null);
//   const [advocateCode, setAdvocateCode] = useState("29694");
//   const [city, setCity] = useState("khi");
//   const [caseNum, setCaseNum] = useState('');
//   const [caseYear, setCaseYear] = useState('');

//   // Pagination state
//   const [currentPage, setCurrentPage] = useState(1);
//   const itemsPerPage = 10;

//   // Fetch ALL cases only when search is triggered
//   const fetchAllCases = async () => {
//     setLoading(true);
//     setError(null);
//     setInitialLoad(true);

//     try {
//       const response = await fetch(
//         `/api/shc-cases?advocateCode=29694&city=${city}&all=true`
//       );
//       const result = await response.json(); 

//       if (result.success) {
//         setAllCases(result.data);
//         // Apply filters immediately after fetching
//         applyFilters(result.data);
//       } else {
//         setError(result.error || "Failed to fetch cases");
//       }
//     } catch (err) {
//       setError("Network error occurred");
//     } finally {
//       setLoading(false);
//     }
//   };

//   // Apply filters to the data
//   const applyFilters = (data: Case[] = allCases) => {
//     let filtered = [...data];
    
//     if (caseNum.trim() !== '') {
//       filtered = filtered.filter(caseItem => 
//         caseItem.caseNo.toLowerCase().includes(caseNum.toLowerCase())
//       );
//     }
    
//     if (caseYear.trim() !== '') {
//       filtered = filtered.filter(caseItem => 
//         caseItem.caseYear.includes(caseYear)
//       );
//     }
    
//     setFilteredCases(filtered);
//     setCurrentPage(1);
//   };

//   const handleSearch = (e: React.FormEvent) => {
//     e.preventDefault();
    
//     // If we haven't loaded data yet, fetch all cases
//     if (!initialLoad) {
//       fetchAllCases();
//     } else {
//       // If data is already loaded, just apply filters
//       applyFilters();
//     }
//   };

//   const handleClearFilters = () => {
//     setCaseNum('');
//     setCaseYear('');
    
//     if (initialLoad) {
//       // If data is loaded, show all cases
//       setFilteredCases(allCases);
//     } else {
//       // If no data loaded yet, clear everything
//       setFilteredCases([]);
//     }
//     setCurrentPage(1);
//   };

//   const handleViewCase = (caseId: string) => {
//     router.push(`/shc-cases/${caseId}`);
//   };

//   // Client-side pagination calculations
//   const totalFilteredCount = filteredCases.length;
//   const totalPages = Math.ceil(totalFilteredCount / itemsPerPage);
//   const indexOfFirstItem = (currentPage - 1) * itemsPerPage;
//   const indexOfLastItem = indexOfFirstItem + itemsPerPage;
//   const currentCases = filteredCases.slice(indexOfFirstItem, indexOfLastItem);

//   const goToPage = (pageNumber: number) => {
//     setCurrentPage(pageNumber);
//     window.scrollTo({ top: 0, behavior: "smooth" });
//   };

//   function renderPagination(): React.ReactNode {
//     if (totalPages <= 1) return null;

//     const pageNumbers = [];
//     const maxPageButtons = 5;
//     let startPage = Math.max(1, currentPage - Math.floor(maxPageButtons / 2));
//     let endPage = startPage + maxPageButtons - 1;

//     if (endPage > totalPages) {
//       endPage = totalPages;
//       startPage = Math.max(1, endPage - maxPageButtons + 1);
//     }

//     for (let i = startPage; i <= endPage; i++) {
//       pageNumbers.push(i);
//     }

//     return (
//       <div className="flex justify-center items-center mt-4 gap-2">
//         <button
//           disabled={currentPage === 1}
//           onClick={() => goToPage(currentPage - 1)}
//           className={`px-3 py-1 rounded border ${
//             currentPage === 1
//               ? "bg-gray-200 text-gray-400 cursor-not-allowed"
//               : "bg-white hover:bg-gray-100 text-blue-600"
//           }`}
//         >
//           Prev
//         </button>
//         {startPage > 1 && (
//           <button
//             onClick={() => goToPage(1)}
//             className="px-3 py-1 rounded border bg-white hover:bg-gray-100 text-blue-600"
//           >
//             1
//           </button>
//         )}
//         {startPage > 2 && <span className="px-2">...</span>}
//         {pageNumbers.map((num) => (
//           <button
//             key={num}
//             onClick={() => goToPage(num)}
//             className={`px-3 py-1 rounded border ${
//               num === currentPage
//                 ? "bg-blue-600 text-white"
//                 : "bg-white hover:bg-gray-100 text-blue-600"
//             }`}
//           >
//             {num}
//           </button>
//         ))}
//         {endPage < totalPages - 1 && <span className="px-2">...</span>}
//         {endPage < totalPages && (
//           <button
//             onClick={() => goToPage(totalPages)}
//             className="px-3 py-1 rounded border bg-white hover:bg-gray-100 text-blue-600"
//           >
//             {totalPages}
//           </button>
//         )}
//         <button
//           disabled={currentPage === totalPages}
//           onClick={() => goToPage(currentPage + 1)}
//           className={`px-3 py-1 rounded border ${
//             currentPage === totalPages
//               ? "bg-gray-200 text-gray-400 cursor-not-allowed"
//               : "bg-white hover:bg-gray-100 text-blue-600"
//           }`}
//         >
//           Next
//         </button>
//       </div>
//     );
//   }

//   return (
//     <div>
//       <Header />
//       <div className="container mx-auto p-6">
//         <h1 className="text-3xl font-bold mb-6">
//           Sindh High Court Cases - {city.toUpperCase()}
//         </h1>

//         <div className="md:flex md:gap-4 lg:flex lg:gap-4 justify-center items-center">
//           <div>
//             <label
//               htmlFor="city-circuit"
//               className="block text-sm font-medium text-gray-700 mb-1"
//             >
//               City/Circuit
//             </label>
//             <select
//               id="city-circuit"
//               className="border rounded px-3 py-2 w-full max-w-xs"
//               value={city}
//               onChange={(e) => setCity(e.target.value)}
//             >
//               <option value="khi">Karachi</option>
//               <option value="suk">Sukkur</option>
//               <option value="hyd">Hyderabad</option>
//               <option value="lar">Larkana</option>
//               <option value="mirpurkhas">Mirpurkhas</option>
//             </select>
//           </div>
//           <div>
//             <label
//               htmlFor="case-number"
//               className="block text-sm font-medium text-gray-700 mb-1"
//             >
//               Case Number
//             </label>
//             <input
//               type="text"
//               value={caseNum}
//               onChange={(e) => setCaseNum(e.target.value)}
//               placeholder="Enter Case Number"
//               className="border rounded px-3 py-2 w-full max-w-xs"
//             />
//           </div>
//           <div>
//             <label
//               htmlFor="case-year"
//               className="block text-sm font-medium text-gray-700 mb-1"
//             >
//               Year
//             </label>
//             <input
//               type="text"
//               value={caseYear}
//               onChange={(e) => setCaseYear(e.target.value)}
//               placeholder="Enter Case Year"
//               className="border rounded px-3 py-2 w-full max-w-xs"
//             />
//           </div>
//           <div className="pt-4 flex gap-2">
//             <button
//               type="submit"
//               className="bg-blue-600 text-white px-6 py-2 rounded hover:bg-blue-700"
//               onClick={handleSearch}
//               disabled={loading}
//             >
//               {loading ? 'Loading...' : (
//                 <>
//                   <Search className="inline-block mr-1" />
//                   Search
//                 </>
//               )}
//             </button>
//             <button
//               type="button"
//               className="bg-gray-500 text-white px-6 py-2 rounded hover:bg-gray-600"
//               onClick={handleClearFilters}
//               disabled={loading}
//             >
//               Clear
//             </button>
//           </div>
//         </div>

//         {/* Instructions */}
//         {!initialLoad && !loading && (
//           <div className="mt-4 p-4 bg-yellow-50 border border-yellow-200 rounded">
//             <p className="text-yellow-700 text-sm">
//               💡 <strong>Instructions:</strong> Select city/circuit and enter case number/year filters, then click "Search" to load cases. 
//               This will fetch all records for the selected criteria.
//             </p>
//           </div>
//         )}

//         {/* Loading state */}
//         {loading && (
//           <div className="mt-4 p-4 bg-blue-50 rounded">
//             <div className="flex items-center justify-center">
//               <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600 mr-3"></div>
//               <p className="text-blue-700">
//                 Loading cases... This may take a moment as we fetch all records.
//               </p>
//             </div>
//           </div>
//         )}

//         {/* Results summary */}
//         {initialLoad && !loading && (
//           <div className="mt-4 p-3 bg-green-50 rounded">
//             <p className="text-sm text-green-700">
//               ✅ Loaded {allCases.length} total cases. 
//               {filteredCases.length !== allCases.length && 
//                 ` Showing ${filteredCases.length} filtered cases.`
//               }
//             </p>
//           </div>
//         )}

//         {/* Filter summary */}
//         {(caseNum || caseYear) && initialLoad && !loading && (
//           <div className="mt-2 p-2 bg-blue-50 rounded">
//             <p className="text-xs text-blue-700">
//               Filtered by: 
//               {caseNum && ` Case Number: "${caseNum}"`}
//               {caseNum && caseYear && ' and'}
//               {caseYear && ` Year: "${caseYear}"`}
//             </p>
//           </div>
//         )}

//         {error && (
//           <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mt-4">
//             {error}
//           </div>
//         )}

//         {!loading && !error && filteredCases.length === 0 && initialLoad && (
//           <div className="text-center py-8 text-gray-600">
//             No cases match your filter criteria.
//           </div>
//         )}

//         {!loading && !error && filteredCases.length > 0 && (
//           <div className="overflow-x-auto mt-6">
//             <div className="mb-4 flex justify-between items-center">
//               <p className="text-gray-600">
//                 Showing {indexOfFirstItem + 1}-
//                 {Math.min(indexOfLastItem, totalFilteredCount)} of {totalFilteredCount}{" "}
//                 cases
//                 {(caseNum || caseYear) && " (filtered)"}
//               </p>
//               <p className="text-gray-600">
//                 Page {currentPage} of {totalPages}
//               </p>
//             </div>
//             <table className="min-w-full bg-white border border-gray-300">
//               <thead className="bg-gray-100">
//                 <tr>
//                   <th className="px-4 py-2 border">Sr#</th>
//                   <th className="px-4 py-2 border">Type</th>
//                   <th className="px-4 py-2 border">Case No</th>
//                   <th className="px-4 py-2 border">Year</th>
//                   <th className="px-4 py-2 border">Bench</th>
//                   <th className="px-4 py-2 border">Circuit</th>
//                   <th className="px-4 py-2 border">Parties</th>
//                   <th className="px-4 py-2 border">Matter</th>
//                   <th className="px-4 py-2 border">Institution Date</th>
//                   <th className="px-4 py-2 border">Last Date</th>
//                   <th className="px-4 py-2 border">Next Date</th>
//                   <th className="px-4 py-2 border">Status</th>
//                   <th className="px-4 py-2 border">Action</th>
//                 </tr>
//               </thead>
//               <tbody>
//                 {currentCases.map((caseItem, index) => (
//                   <tr key={index} className="hover:bg-gray-50">
//                     <td className="px-4 py-2 border">{caseItem.srNo}</td>
//                     <td className="px-4 py-2 border">{caseItem.caseType}</td>
//                     <td className="px-4 py-2 border">{caseItem.caseNo}</td>
//                     <td className="px-4 py-2 border">{caseItem.caseYear}</td>
//                     <td className="px-4 py-2 border">{caseItem.bench}</td>
//                     <td className="px-4 py-2 border">{caseItem.circuit}</td>
//                     <td className="px-4 py-2 border">
//                       <div
//                         dangerouslySetInnerHTML={{ __html: caseItem.parties }}
//                       />
//                     </td>
//                     <td className="px-4 py-2 border">{caseItem.matter}</td>
//                     <td className="px-4 py-2 border">
//                       {caseItem.institutionDate}
//                     </td>
//                     <td className="px-4 py-2 border">{caseItem.lastDate}</td>
//                     <td className="px-4 py-2 border">{caseItem.nextDate}</td>
//                     <td className="px-4 py-2 border">
//                       <div
//                         dangerouslySetInnerHTML={{ __html: caseItem.status }}
//                       />
//                     </td>
//                     <td className="px-4 py-2 border">
//                       {caseItem.caseId ? (
//                         <button
//                           onClick={() => handleViewCase(caseItem.caseId!)}
//                           className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 inline-block text-sm"
//                         >
//                           View
//                         </button>
//                       ) : (
//                         <span className="text-gray-400">N/A</span>
//                       )}
//                     </td>
//                   </tr>
//                 ))}
//               </tbody>
//             </table>
//             {renderPagination()}
//           </div>
//         )}
//       </div>
//     </div>
//   );
// }